name: .NET Build & Deploy MultiCloud üèóÔ∏è üì¶

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

#AWS needed env varibales & permissions
env:
  AWS_REGION: eu-west-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: dockerdotnet-repo           # set this to your Amazon ECR repository name
  ECS_SERVICE: DockerDotNet-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: DockerDotNet-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: AppContainerDefinition           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: 'Restore dependencies üì¶'
      run: dotnet restore ./DockerDotNet.csproj

    - name: Build
      run: dotnet build ./DockerDotNet.csproj --no-restore

  docker-build-push-DockerHub:
    runs-on: 'ubuntu-latest'
    needs: build

    steps:

    - uses: actions/checkout@v3

    - name: Log in to registry
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.AzureAppService_ContainerUsername_be787e7656d846b5948d48b4759fbcd6 }}
        password: ${{ secrets.AzureAppService_ContainerPassword_813d0b298a3e4e1c8199b5fd0d691306 }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Build and push container image to registry
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./Dockerfile
        push: true        
        tags: ${{ secrets.AzureAppService_ContainerUsername_be787e7656d846b5948d48b4759fbcd6 }}/docker_dotnet6_app:latest
                
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  DeployToAzure:
    name: Deploy To Azure App Service
    runs-on: ubuntu-latest
    needs: docker-build-push-DockerHub
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'dockerdotnet6app'
        slot-name: 'production'
        publish-profile: ${{ secrets.AzureAppService_PublishProfile_d25a63a49dfc4f1086c7588a8f23af3d }}
        images: '${{ secrets.AzureAppService_ContainerUsername_be787e7656d846b5948d48b4759fbcd6 }}/docker_dotnet6_app:latest'
        
  dockerBuildPushToECR:
    runs-on: 'ubuntu-latest'
    # Map a step output to a job output
    outputs:
      dockerImageTag: ${{ steps.buildDockerImage.outputs.imageTag }}
      output2: ${{ steps.testStep.outputs.test }}
    needs: build
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: buildDockerImage
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=imageTag::$IMAGE_TAG"        
        
    - name: Test Step
      id: testStep
      run: echo "::set-output name=test::prueba"
     
  DeployToAWS:
    name: Deploy To AWS ECS
    runs-on: ubuntu-latest
    needs: dockerBuildPushToECR
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: echo_step
      id: echo_step
      run: echo "I'm showing test variable from previous job name ${{ needs.dockerBuildPushToECR.outputs.output2 }}"

    - name: echo_step_image
      id: echo_step_image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: echo "I'm showing image name ${{ needs.dockerBuildPushToECR.outputs.dockerImageTag }}"
       
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}        
        image: $ECR_REGISTRY/$ECR_REPOSITORY:${{ needs.dockerBuildPushToECR.outputs.dockerImageTag }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true